name: NASA Project CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Install MongoDB
      - name: Install MongoDB
        run: |
          choco install mongodb --params "/InstallDir=C:\MongoDB" -y
          mkdir C:\data\db

      # Start MongoDB
      - name: Start MongoDB
        run: |
          $mongod = (Get-ChildItem -Path "C:\MongoDB" -Recurse -Filter mongod.exe | Select-Object -First 1).FullName
          Write-Output "Starting MongoDB from $mongod"
          Start-Process -FilePath $mongod -ArgumentList "--dbpath C:\data\db --bind_ip 127.0.0.1" -NoNewWindow
          echo "MongoDB started in the background."

      # Wait for MongoDB to be ready
      - name: Wait for MongoDB
        shell: pwsh
        run: |
          $retries = 10
          $delay = 3
          for ($i=0; $i -lt $retries; $i++) {
            try {
              & "C:\MongoDB\bin\mongo.exe" --eval "db.stats()" | Out-Null
              Write-Host "MongoDB is ready!"
              exit 0
            } catch {
              Write-Host "Waiting for MongoDB... ($($i+1)/$retries)"
              Start-Sleep -Seconds $delay
            }
          }
          Write-Error "MongoDB did not start in time."
          exit 1

      # Install server dependencies
      - name: Install server dependencies
        run: |
          if (Test-Path "package.json") {
            npm install
          } elseif (Test-Path "server/package.json") {
            cd server
            npm install
            cd ..
          }

      # Install client dependencies
      - name: Install client dependencies
        run: |
          if (Test-Path "client/package.json") {
            cd client
            npm install
            cd ..
          }

      # Build the client
      - name: Build client
        run: |
          if (Test-Path "client/package.json") {
            npm run build --prefix client
          }

      # Run tests
      - name: run test
        run: npm test
